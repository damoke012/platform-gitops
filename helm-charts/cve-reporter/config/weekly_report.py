#!/usr/bin/env python3
import os
import json
import smtplib
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

HARBOR_URL = os.getenv('HARBOR_URL', 'https://harbor.apps.lab.ocp.lan')
HARBOR_USER = os.getenv('HARBOR_USER', 'admin')
HARBOR_PASS = os.getenv('HARBOR_PASS', 'Harbor12345')
SMTP_HOST = os.getenv('SMTP_HOST', 'smtp-mail.outlook.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
SMTP_USER = os.getenv('SMTP_USER', 'damoke012@hotmail.com')
SMTP_PASS = os.getenv('SMTP_PASS', '')
EMAIL_FROM = os.getenv('EMAIL_FROM', 'harbor-security@lab.ocp.lan')
EMAIL_TO = os.getenv('EMAIL_TO', 'damoke012@hotmail.com').split(',')

def get_all_vulnerabilities():
    projects_url = f"{HARBOR_URL}/api/v2.0/projects"
    response = requests.get(projects_url, auth=(HARBOR_USER, HARBOR_PASS), verify=False)

    vulnerabilities = []

    if response.status_code == 200:
        projects = response.json()

        for project in projects:
            repos_url = f"{HARBOR_URL}/api/v2.0/projects/{project['name']}/repositories"
            repos_response = requests.get(repos_url, auth=(HARBOR_USER, HARBOR_PASS), verify=False)

            if repos_response.status_code == 200:
                for repo in repos_response.json():
                    repo_name = repo['name'].split('/')[-1]
                    artifacts_url =
f"{HARBOR_URL}/api/v2.0/projects/{project['name']}/repositories/{repo_name}/artifacts"
                    artifacts_response = requests.get(artifacts_url, auth=(HARBOR_USER, HARBOR_PASS), verify=False)

                    if artifacts_response.status_code == 200:
                        for artifact in artifacts_response.json():
                            scan_overview = artifact.get('scan_overview', {})
                            vuln_report = scan_overview.get('application/vnd.security.vulnerability.report; 
version=1.1', {})
                            summary = vuln_report.get('summary', {})

                            if summary:
                                tag_name = 'untagged'
                                if artifact.get('tags') and len(artifact['tags']) > 0:
                                    tag_name = artifact['tags'][0].get('name', 'untagged')

                                vulnerabilities.append({
                                    'image': f"{repo['name']}:{tag_name}",
                                    'critical': summary.get('critical', 0),
                                    'high': summary.get('high', 0),
                                    'medium': summary.get('medium', 0),
                                    'low': summary.get('low', 0)
                                })

    return vulnerabilities

def send_weekly_report():
    vulnerabilities = get_all_vulnerabilities()

    msg = MIMEMultipart()
    msg['From'] = EMAIL_FROM
    msg['To'] = ', '.join(EMAIL_TO)
    msg['Subject'] = f"[Harbor] Weekly CVE Summary - {datetime.now().strftime('%Y-%m-%d')}"

    total_critical = sum(v['critical'] for v in vulnerabilities)
    total_high = sum(v['high'] for v in vulnerabilities)
    total_medium = sum(v['medium'] for v in vulnerabilities)

    body = f"""Harbor Weekly CVE Summary Report
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Overview:
- Total Images Scanned: {len(vulnerabilities)}
- Total Critical CVEs: {total_critical}
- Total High CVEs: {total_high}
- Total Medium CVEs: {total_medium}

Images with Critical/High Vulnerabilities:
"""

    for vuln in sorted(vulnerabilities, key=lambda x: (x['critical'], x['high']), reverse=True):
        if vuln['critical'] > 0 or vuln['high'] > 0:
            body += f"\n{vuln['image']}: Critical={vuln['critical']}, High={vuln['high']}"

    body += f"\n\nHarbor Console: {HARBOR_URL}\n"

    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USER, SMTP_PASS)
            server.send_message(msg)
        print("Weekly report sent successfully")
    except Exception as e:
        print(f"Error sending weekly report: {e}")

if __name__ == '__main__':
    send_weekly_report()
