#!/usr/bin/env python3
import os
import json
import smtplib
import requests
from http.server import BaseHTTPRequestHandler, HTTPServer
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

HARBOR_URL = os.getenv('HARBOR_URL', 'https://harbor.apps.lab.ocp.lan')
HARBOR_USER = os.getenv('HARBOR_USER', 'admin')
HARBOR_PASS = os.getenv('HARBOR_PASS', 'Harbor12345')
SMTP_HOST = os.getenv('SMTP_HOST', 'smtp-mail.outlook.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
SMTP_USER = os.getenv('SMTP_USER', 'damoke012@hotmail.com')
SMTP_PASS = os.getenv('SMTP_PASS', '')
EMAIL_FROM = os.getenv('EMAIL_FROM', 'harbor-security@lab.ocp.lan')
EMAIL_TO = os.getenv('EMAIL_TO', 'damoke012@hotmail.com').split(',')

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        try:
            event = json.loads(post_data.decode())
            print("Received webhook: " + str(event.get('type')))
            if event.get('type') == 'SCANNING_COMPLETED':
                self.handle_scan_complete(event)
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'OK')
        except Exception as e:
            print("Error: " + str(e))
            self.send_response(500)
            self.end_headers()
    
    def handle_scan_complete(self, event):
        try:
            repo = event['event_data']['repository']['name']
            tag = event['event_data']['resources'][0]['tag']
            namespace = event['event_data']['repository']['namespace']
            api_url = HARBOR_URL + "/api/v2.0/projects/" + namespace + "/repositories/" + repo + "/artifacts/" + tag
            response = requests.get(api_url, auth=(HARBOR_USER, HARBOR_PASS), verify=False)
            if response.status_code == 200:
                artifact = response.json()
                scan_overview = artifact.get('scan_overview', {})
                vuln_report = scan_overview.get('application/vnd.security.vulnerability.report; version=1.1', {})
                summary = vuln_report.get('summary', {})
                critical = summary.get('critical', 0)
                high = summary.get('high', 0)
                if critical > 0 or high > 0:
                    self.send_email(repo, tag, summary)
        except Exception as e:
            print("Error handling scan: " + str(e))
    
    def send_email(self, repo, tag, summary):
        try:
            msg = MIMEMultipart()
            msg['From'] = EMAIL_FROM
            msg['To'] = ', '.join(EMAIL_TO)
            msg['Subject'] = "[Harbor CVE Alert] " + repo + ":" + tag
            body = "Harbor CVE Scan Alert\n\n"
            body += "Image: " + repo + ":" + tag + "\n"
            body += "Harbor: " + HARBOR_URL + "\n\n"
            body += "Vulnerability Summary:\n"
            body += "- Critical: " + str(summary.get('critical', 0)) + "\n"
            body += "- High: " + str(summary.get('high', 0)) + "\n"
            body += "- Medium: " + str(summary.get('medium', 0)) + "\n"
            body += "- Low: " + str(summary.get('low', 0)) + "\n\n"
            body += "Action Required: Review and remediate Critical/High vulnerabilities.\n"
            msg.attach(MIMEText(body, 'plain'))
            with smtplib.SMTP(SMTP_HOST, SMTP_PORT) as server:
                server.starttls()
                server.login(SMTP_USER, SMTP_PASS)
                server.send_message(msg)
            print("Email sent for " + repo + ":" + tag)
        except Exception as e:
            print("Error sending email: " + str(e))

if __name__ == '__main__':
    server = HTTPServer(('0.0.0.0', 8080), WebhookHandler)
    print("Webhook receiver listening on port 8080...")
    server.serve_forever()
