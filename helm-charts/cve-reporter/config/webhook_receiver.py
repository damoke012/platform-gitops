#!/usr/bin/env python3
import os, json, smtplib, requests, urllib3
from http.server import BaseHTTPRequestHandler, HTTPServer
from email.mime.text import MIMEText
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

HARBOR_URL = os.getenv('HARBOR_URL')
HARBOR_USER = os.getenv('HARBOR_USERNAME')
HARBOR_PASS = os.getenv('HARBOR_PASSWORD')

class WebhookHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            content_length = int(self.headers.get('Content-Length', 0))
            event = json.loads(self.rfile.read(content_length).decode())

            if event.get('type') == 'SCANNING_COMPLETED':
                resources = event.get('event_data', {}).get('resources', [])
                if resources:
                    resource_url = resources[0].get('resource_url', '')
                    parts = resource_url.split('/')
                    if len(parts) >= 3:
                        project, repo, tag = parts[-3], parts[-2], parts[-1].split(':')[-1]
                        self.check_and_alert(project, repo, tag)

            self.send_response(200)
            self.end_headers()
        except Exception as e:
            print(f"Error: {e}")
            self.send_response(500)
            self.end_headers()

    def check_and_alert(self, project, repo, tag):
        url =
f"{HARBOR_URL}/api/v2.0/projects/{project}/repositories/{repo}/artifacts/{tag}?with_scan_overview=true"
        resp = requests.get(url, auth=(HARBOR_USER, HARBOR_PASS), verify=False)

        if resp.status_code == 200:
            artifact = resp.json()
            scan_result = artifact.get('scan_overview', {}).get('application/vnd.security.vulnerability.report; 
version=1.1', {})
            summary = scan_result.get('summary', {}).get('summary', {})

            critical = summary.get('Critical', 0)
            high = summary.get('High', 0)

            if critical > 0 or high > 0:
                self.send_email(project, repo, tag, critical, high, summary.get('Medium', 0))

    def send_email(self, project, repo, tag, critical, high, medium):
        subject = f"CVE Alert: {critical} Critical, {high} High - {project}/{repo}:{tag}"
        body = f"""SECURITY ALERT

Image: {project}/{repo}:{tag}
Scanned: {datetime.now().strftime('%Y-%m-%d %H:%M UTC')}

Critical: {critical}
High: {high}
Medium: {medium}

View: {HARBOR_URL}/harbor/projects/{project}/repositories/{repo}/artifacts/{tag}
"""

        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = os.getenv('EMAIL_FROM')
        msg['To'] = os.getenv('EMAIL_TO')

        try:
            with smtplib.SMTP(os.getenv('SMTP_HOST'), int(os.getenv('SMTP_PORT'))) as server:
                server.starttls()
                server.login(os.getenv('SMTP_USERNAME'), os.getenv('SMTP_PASSWORD'))
                server.send_message(msg)
            print(f"Email sent for {project}/{repo}:{tag}")
        except Exception as e:
            print(f"Email failed: {e}")

if __name__ == '__main__':
    server = HTTPServer(('0.0.0.0', int(os.getenv('WEBHOOK_PORT', 8080))), WebhookHandler)
    print(f"Listening on port {os.getenv('WEBHOOK_PORT', 8080)}")
    server.serve_forever()
